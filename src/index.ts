/**
 * GPTZero Chat Plugin
 *
 * This Cloudflare Worker provides a chat plugin for GPTZero, an API that predicts
 * whether a given text was generated by a large language model. The plugin exposes
 * an OpenAPI schema and a manifest file for integration with chat platforms.
 *
 */
import manifest from "../manifest.json";
import openApiSchema from "../open_api.json";

async function handleRequest(request:Request) {
  const url = new URL(request.url);
  const path = url.pathname;

  if (path === "/openapi.json") {
    return new Response(JSON.stringify(openApiSchema), {
      headers: { "Content-Type": "application/json" },
    });
  }

  if (path === "/.well-known/ai-plugin.json") {
    return new Response(JSON.stringify(manifest), {
      headers: { "Content-Type": "application/json" },
    });
  }

  if (path === "/predict") {
    const authHeader = request.headers.get("Authorization");
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      return new Response("API key is required", { status: 400 });
    }
    const apiKey = authHeader.split(" ")[1];
    const requestBody = await request.json() as { document: string };
    const document = requestBody.document;
    const data = { document };

    try {
      const response = await fetch("https://api.gptzero.me/v2/predict/text", {
        method: "POST",
        headers: {
          accept: "application/json",
          "X-Api-Key": apiKey,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      });

      const result = await response.json();
      return new Response(JSON.stringify(result), {
        headers: { "Content-Type": "application/json" },
      });
    } catch (error) {
      return new Response("Error processing request", { status: 500 });
    }
  }

  return new Response("Not found", { status: 404 });
}

export default {
  fetch(request: Request) {
    return handleRequest(request);
  },
};